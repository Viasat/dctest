#!/usr/bin/env bash

PROJECT=${PROJECT:-${USER}}
DCTEST_IMAGE=${DCTEST_IMAGE}

repo_root=$(realpath $(dirname $(realpath "${0}"))/..)

results_dir=$(mktemp -d)

dc() { docker compose -p ${PROJECT} -f ${repo_root}/examples/docker-compose.yaml "${@}"; }
up() { dc up -d; }
down() { dc down -t1; }

fail() {
  msg=${1}
  down
  echo $msg
  exit 1
}

check() {
  passed=${1}; shift
  failed=${1}; shift
  opts=${1}; shift
  example_files=${@}

  cmd="${repo_root}/dctest"
  if [ "${DCTEST_IMAGE}" ]; then
    cmd="docker run --rm -v /var/run/docker.sock:/var/run/docker.sock"
    cmd="${cmd} -v ${repo_root}/:${repo_root}:ro -v ${results_dir}/:${results_dir}"
    cmd="${cmd} ${DCTEST_IMAGE}"
  fi
  cmd="${cmd} ${opts} --results-file ${results_dir}/results.json ${PROJECT}"
  for example in ${example_files}; do
    cmd="${cmd} ${repo_root}/examples/${example}"
  done

  echo "Running: ${cmd}"
  ${cmd}
  exitcode=$?

  if [ "${failed}" == "0" ]; then
    expected_exitcode="0"
  else
    expected_exitcode="1"
  fi

  [ "${expected_exitcode}" == "${exitcode}" ] \
    || fail "Exit code ${exitcode} doesn't match expected ${expected_exitcode}"

  jq --exit-status '[.summary.passed == '${passed}', .summary.failed == '${failed}'] | all' ${results_dir}/results.json \
    || fail "Results file does not match expected passed/fail rate"

  node ${repo_root}/scripts/validateSchema.js ${results_dir}/results.json ${repo_root}/schemas/results-file.yaml \
    || fail "Results file does not match schema"
}


[ "${repo_root}" ] || fail "repo_root cannot be empty"
[ "/" = "${repo_root}" ] && fail "repo_root cannot be '/'"

# TESTS

copt="--continue-on-error"
eopt="--environ-file ${repo_root}/examples/03-env-file"

up

check 7  0  "${copt}        " 00-intro.yaml
check 9  10 "${copt}        " 00-intro.yaml 01-fails.yaml
check 7  1  "               " 00-intro.yaml 01-fails.yaml
check 12 0  "${copt}        " 02-deps.yaml
check 4  0  "${copt} ${eopt}" 03-env.yaml
check 2  2  "${copt}        " 03-env.yaml

down
