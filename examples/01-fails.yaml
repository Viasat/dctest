name: Example Suite - Failures

# This file demonstrates negative cases. Tests IDs prefixed 'fail-'
# are expected to always fail. Test IDs prefixed 'maybe-' are expected
# to pass (when using `--continue-on-error`).

tests:

  fail-exit-code:
    name: Failing due to non-zero exit code
    steps:
      - exec: node1
        run: echo "some leading stdout"
      - exec: node1
        run: /bin/false
      - exec: node1
        run: echo 'This step is skipped'
      - exec: node1
        if: failure()
        run: echo "This step WILL be run!"

  fail-signal:
    name: Failing due to INT signal
    steps:
      - exec: :host
        run: kill -s INT $$
      - exec: node1
        run: echo 'This step is skipped'

  maybe-skipped:
    depends: "fail-signal" # any failing test would do
    name: Skipped test (unless running with --continue-on-error)
    steps:
      - exec: node1
        run: /bin/true

  fail-nonexistent-container:
    name: Test nonexistent container
    steps:
      - exec: node2
        run: /bin/true

  fail-expect:
    name: Failing due to unmet expect condition
    steps:
      - exec: node1
        run: /bin/true
        expect:
          - 1 == 2

  fail-if-throws:
    name: Test thrown exception in expressions ('if')
    steps:
      - if: throw("Intentional Failure")
        exec: node1
        run: /bin/true

  fail-env-throws:
    name: Test thrown exception in expressions ('env')
    steps:
      - env:
          FOO: ${{ throw("Intentional Failure") }}
        exec: node1
        run: /bin/true

  fail-expect-throws:
    name: Test thrown exception in expressions ('expect')
    steps:
      - exec: node1
        run: /bin/true
        expect: throw("Intentional Failure")

  fail-with-outputs:
    name: Failing test that defines outputs
    outputs:
      TWO: 2
      THREE: ${{ steps['failed-step'].outputs.THREE }}
      ERROR: ${{ throw("Intentional Failure") }}
    steps:
      - id: failed-step
        exec: node1
        run: /bin/false
        outputs:
          THREE: ${{ 3 }}

  maybe-check-empty-failure-outputs:
    depends: fail-with-outputs
    name: Assert failed tests still interpolate outputs
    steps:
      - exec: node1
        run: /bin/true
        expect:
          # Successfully interpolated outputs are returned, even for failed tests
          - tests['fail-with-outputs'].outputs.TWO == '2'
          - tests['fail-with-outputs'].outputs.THREE == '3'
          - tests['fail-with-outputs'].outputs.ERROR == null

  fail-outputs-in-test-error:
    name: Tests fail if test outputs error
    outputs:
      ERROR: ${{ throw("Intentional Failure") }}
    steps:
      - exec: node1
        run: /bin/true

  fail-outputs-in-step-error:
    name: Tests fail if step outputs error
    steps:
      - exec: node1
        run: /bin/true
        outputs:
          ERROR: ${{ throw("Intentional Failure") }}
